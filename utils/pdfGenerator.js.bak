// utils/pdfGenerator.js
// üîß VERSI√ìN CORREGIDA: Generador de PDF con formateo consistente de fechas
// Soluciona errores de hidrataci√≥n usando formateo manual en lugar de toLocaleString()

import jsPDF from 'jspdf';
import { formatDateConsistently, formatDateTimeConsistently, formatNumberConsistently } from './dateUtils';

/**
 * Genera un reporte PDF completo de la inspecci√≥n
 * @param {Object} inspectionData - Datos de la inspecci√≥n
 * @param {Object} vehicleInfo - Informaci√≥n del veh√≠culo
 * @param {Object} userInfo - Informaci√≥n del inspector
 * @param {Object} checklistStructure - Estructura del checklist
 * @returns {Object} - Resultado de la generaci√≥n
 */
export const generatePDFReport = (inspectionData, vehicleInfo, userInfo, checklistStructure) => {
  try {
    // Validaci√≥n de datos de entrada
    if (!inspectionData || !vehicleInfo || !checklistStructure) {
      throw new Error('Datos insuficientes para generar el reporte');
    }

    // Crear nuevo documento PDF
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    let yPosition = margin;

    // Funci√≥n para verificar si necesita nueva p√°gina
    const checkPageBreak = (requiredHeight) => {
      if (yPosition + requiredHeight > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
      }
    };

    // Funci√≥n para a√±adir texto con ajuste de l√≠neas
    const addText = (text, x, y, options = {}) => {
      const { fontSize = 10, maxWidth = contentWidth, lineHeight = 1.2 } = options;
      doc.setFontSize(fontSize);
      
      const lines = doc.splitTextToSize(text, maxWidth);
      let currentY = y;
      
      lines.forEach(line => {
        checkPageBreak(fontSize * lineHeight);
        doc.text(line, x, currentY);
        currentY += fontSize * lineHeight;
      });
      
      return currentY;
    };

    // ENCABEZADO DEL DOCUMENTO
    doc.setFillColor(37, 99, 235); // blue-600
    doc.rect(0, 0, pageWidth, 40, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('REPORTE DE INSPECCI√ìN VEHICULAR', margin, 25);
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text('Sistema de Inspecci√≥n 4x4', margin, 35);

    // Resetear color de texto
    doc.setTextColor(0, 0, 0);
    yPosition = 50;

    // INFORMACI√ìN DEL VEH√çCULO
    checkPageBreak(60);
    doc.setFillColor(249, 250, 251); // gray-50
    doc.rect(margin, yPosition, contentWidth, 30, 'F');
    
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('INFORMACI√ìN DEL VEH√çCULO', margin + 5, yPosition + 10);
    
    yPosition += 35;

    // Datos del veh√≠culo en dos columnas
    const vehicleData = [
      [`Marca: ${vehicleInfo.marca || 'N/A'}`, `Modelo: ${vehicleInfo.modelo || 'N/A'}`],
      [`A√±o: ${vehicleInfo.a√±o || 'N/A'}`, `Placa: ${vehicleInfo.placa || 'N/A'}`],
      [`Kilometraje: ${vehicleInfo.kilometraje ? formatNumberConsistently(vehicleInfo.kilometraje) : 'N/A'}`, `Combustible: ${vehicleInfo.combustible || 'N/A'}`],
      [`Transmisi√≥n: ${vehicleInfo.transmision || 'N/A'}`, `Color: ${vehicleInfo.color || 'N/A'}`],
      [`Precio: ${vehicleInfo.precio ? '$' + formatNumberConsistently(vehicleInfo.precio) : 'N/A'}`, `Vendedor: ${vehicleInfo.vendedor || 'N/A'}`],
      // ‚úÖ CORRECCI√ìN: Usar formateo consistente en lugar de toLocaleDateString
      [`Fecha de Inspecci√≥n: ${vehicleInfo.fecha ? formatDateConsistently(vehicleInfo.fecha) : formatDateConsistently(new Date())}`, '']
    ];

    vehicleData.forEach(([left, right]) => {
      checkPageBreak(15);
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(left, margin + 5, yPosition);
      if (right) {
        doc.text(right, margin + (contentWidth / 2), yPosition);
      }
      yPosition += 12;
    });

    yPosition += 10;

    // CALCULAR M√âTRICAS
    const metrics = calculateDetailedMetrics(inspectionData, checklistStructure);
    
    // Determinar condici√≥n general
    const condition = getVehicleCondition(metrics.averageScore);

    // RESUMEN EJECUTIVO
    checkPageBreak(40);
    doc.setFillColor(243, 244, 246);
    doc.rect(margin, yPosition - 5, contentWidth, 25, 'F');
    
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('RESUMEN EJECUTIVO', margin + 5, yPosition + 5);

    yPosition += 25;

    // M√©tricas principales
    const metricsData = [
      ['Puntuaci√≥n General:', `${metrics.averageScore}/10`, condition.text],
      // ‚úÖ CORRECCI√ìN: Usar formateo consistente de n√∫meros
      ['Costo de Reparaciones:', `$${formatNumberConsistently(metrics.totalRepairCost)}`, ''],
      ['√çtems Evaluados:', `${metrics.evaluatedItems}/${metrics.totalItems}`, `${formatNumberConsistently(metrics.completionPercentage)}%`],
      ['Estado General:', condition.text, '']
    ];

    metricsData.forEach(([label, value, extra]) => {
      checkPageBreak(15);
      doc.setFont('helvetica', 'bold');
      doc.text(label, margin + 5, yPosition);
      doc.setFont('helvetica', 'normal');
      doc.text(value, margin + 80, yPosition);
      if (extra) {
        doc.text(extra, margin + 140, yPosition);
      }
      yPosition += 12;
    });

    yPosition += 15;

    // RECOMENDACIONES GENERALES
    checkPageBreak(30);
    doc.setFillColor(254, 226, 226); // red-100
    doc.rect(margin, yPosition - 5, contentWidth, 20, 'F');
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('RECOMENDACIONES GENERALES', margin + 5, yPosition + 8);

    yPosition += 25;

    const recommendations = [];
    if (parseFloat(metrics.averageScore) < 6) {
      recommendations.push('‚Ä¢ Se recomienda una inspecci√≥n mec√°nica profesional antes de la compra');
    }
    if (metrics.totalRepairCost > 2000000) {
      recommendations.push('‚Ä¢ El costo de reparaciones es elevado, considere negociar el precio');
    }
    if (parseFloat(metrics.completionPercentage) < 80) {
      recommendations.push('‚Ä¢ La inspecci√≥n est√° incompleta, complete todas las categor√≠as');
    }
    if (recommendations.length === 0) {
      recommendations.push('‚Ä¢ El veh√≠culo presenta un buen estado general');
    }

    recommendations.forEach(rec => {
      yPosition = addText(rec, margin + 5, yPosition, { fontSize: 10, maxWidth: contentWidth - 10 });
      yPosition += 5;
    });

    yPosition += 15;

    // DETALLE POR CATEGOR√çAS
    checkPageBreak(30);
    doc.setFillColor(37, 99, 235);
    doc.rect(margin, yPosition - 5, contentWidth, 20, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('DETALLE POR CATEGOR√çAS', margin + 5, yPosition + 8);
    
    doc.setTextColor(0, 0, 0);
    yPosition += 25;

    // Iterar por cada categor√≠a
    Object.entries(checklistStructure).forEach(([categoryName, items]) => {
      checkPageBreak(40);
      
      // Encabezado de categor√≠a
      doc.setFillColor(229, 231, 235); // gray-200
      doc.rect(margin, yPosition - 5, contentWidth, 20, 'F');
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text(categoryName.toUpperCase(), margin + 5, yPosition + 8);
      
      // Calcular puntuaci√≥n de la categor√≠a
      const categoryData = inspectionData[categoryName] || {};
      const categoryItems = items.filter(item => categoryData[item.name]?.evaluated);
      const categoryScore = categoryItems.length > 0 
        ? categoryItems.reduce((sum, item) => sum + (categoryData[item.name]?.score || 0), 0) / categoryItems.length
        : 0;
      
      doc.setFont('helvetica', 'normal');
      doc.text(`Puntuaci√≥n: ${categoryScore.toFixed(1)}/10`, pageWidth - margin - 50, yPosition + 8);
      
      yPosition += 25;

      // Detalles de cada √≠tem
      items.forEach(item => {
        const itemData = categoryData[item.name] || {};
        
        checkPageBreak(25);
        
        // Nombre del √≠tem
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(10);
        doc.text(`${item.name}`, margin + 5, yPosition);

        // Puntuaci√≥n
        if (itemData.evaluated) {
          const scoreColor = itemData.score >= 8 ? '#16a34a' : itemData.score >= 5 ? '#ca8a04' : '#dc2626';
          doc.text(`${itemData.score}/10`, pageWidth - margin - 30, yPosition);
        } else {
          doc.text('No evaluado', pageWidth - margin - 35, yPosition);
        }

        yPosition += 12;

        // Descripci√≥n
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8);
        yPosition = addText(item.description || '', margin + 10, yPosition, { fontSize: 8, maxWidth: contentWidth - 50 });
        yPosition += 5;

        // Costo de reparaci√≥n si existe
        if (itemData.repairCost && parseFloat(itemData.repairCost) > 0) {
          doc.setFont('helvetica', 'bold');
          // ‚úÖ CORRECCI√ìN: Usar formateo consistente de n√∫meros
          yPosition = addText(`Costo estimado reparaci√≥n: ${formatNumberConsistently(itemData.repairCost)}`, 
            margin + 10, yPosition, { fontSize: 9 });
          yPosition += 5;
        }

        // Notas si existen
        if (itemData.notes && itemData.notes.trim()) {
          doc.setFont('helvetica', 'italic');
          yPosition = addText(`Notas: ${itemData.notes}`, margin + 10, yPosition, { fontSize: 9 });
          yPosition += 5;
        }

        yPosition += 8;
      });

      yPosition += 10;
    });

    // PIE DE P√ÅGINA EN √öLTIMA P√ÅGINA
    checkPageBreak(30);
    yPosition = pageHeight - 40;

    doc.setFillColor(243, 244, 246);
    doc.rect(margin, yPosition, contentWidth, 25, 'F');

    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text('Este reporte fue generado por la aplicaci√≥n de Inspecci√≥n de Veh√≠culos 4x4', margin + 5, yPosition + 8);
    
    // ‚úÖ CORRECCI√ìN CR√çTICA: Usar formateo consistente en lugar de toLocaleString
    doc.text(`Fecha y hora: ${formatDateTimeConsistently(new Date())}`, margin + 5, yPosition + 16);
    
    if (userInfo) {
      doc.text(`Inspector: ${userInfo.name || userInfo.email}`, pageWidth - margin - 80, yPosition + 8);
    }

    // Numeraci√≥n de p√°ginas
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.text(`P√°gina ${i} de ${pageCount}`, pageWidth - margin - 20, pageHeight - 10);
    }

    // Generar nombre del archivo
    const fileName = `inspeccion_${vehicleInfo.placa || 'SIN_PLACA'}_${vehicleInfo.fecha ? formatDateConsistently(vehicleInfo.fecha) : formatDateConsistently(new Date())}.pdf`;

    // Descargar el PDF
    doc.save(fileName);

    return {
      success: true,
      fileName,
      message: 'Reporte PDF generado exitosamente'
    };

  } catch (error) {
    console.error('Error generando PDF:', error);
    return {
      success: false,
      error: error.message || 'Error desconocido al generar PDF'
    };
  }
};

/**
 * Calcula m√©tricas detalladas de la inspecci√≥n
 * @param {Object} inspectionData - Datos de la inspecci√≥n
 * @param {Object} checklistStructure - Estructura del checklist
 * @returns {Object} - M√©tricas calculadas
 */
const calculateDetailedMetrics = (inspectionData, checklistStructure) => {
  let totalScore = 0;
  let totalItems = 0;
  let evaluatedItems = 0;
  let totalRepairCost = 0;
  const categories = {};

  Object.entries(checklistStructure).forEach(([categoryName, items]) => {
    const categoryData = inspectionData[categoryName] || {};
    let categoryScore = 0;
    let categoryEvaluated = 0;
    let categoryRepairCost = 0;

    items.forEach(item => {
      totalItems++;
      const itemData = categoryData[item.name] || {};
      
      if (itemData.evaluated) {
        evaluatedItems++;
        categoryEvaluated++;
        const score = parseFloat(itemData.score) || 0;
        totalScore += score;
        categoryScore += score;
        
        const repairCost = parseFloat(itemData.repairCost) || 0;
        totalRepairCost += repairCost;
        categoryRepairCost += repairCost;
      }
    });

    categories[categoryName] = {
      totalItems: items.length,
      evaluatedItems: categoryEvaluated,
      averageScore: categoryEvaluated > 0 ? (categoryScore / categoryEvaluated).toFixed(1) : 0,
      totalRepairCost: categoryRepairCost,
      completionPercentage: items.length > 0 ? ((categoryEvaluated / items.length) * 100).toFixed(1) : 0
    };
  });

  return {
    categories,
    totalItems,
    evaluatedItems,
    averageScore: evaluatedItems > 0 ? (totalScore / evaluatedItems).toFixed(1) : 0,
    totalRepairCost,
    completionPercentage: totalItems > 0 ? ((evaluatedItems / totalItems) * 100).toFixed(1) : 0
  };
};

/**
 * Determina la condici√≥n general del veh√≠culo
 * @param {number} averageScore - Puntuaci√≥n promedio
 * @returns {Object} - Condici√≥n del veh√≠culo
 */
const getVehicleCondition = (averageScore) => {
  const score = parseFloat(averageScore);
  
  if (score >= 8) {
    return { text: 'Excelente', color: '#16a34a' };
  } else if (score >= 6) {
    return { text: 'Bueno', color: '#ca8a04' };
  } else if (score >= 4) {
    return { text: 'Regular', color: '#ea580c' };
  } else {
    return { text: 'Deficiente', color: '#dc2626' };
  }
};